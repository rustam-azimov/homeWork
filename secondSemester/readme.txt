Условия задач:
Домашнее задание 1. 12.02.2013:

1)Зарегистрироваться на github.com, прислать мне на почту имя логина. Создать себе репозиторий для домашних задач с адекватным именем.

2)Придумать подходящую структуру папок и выложить в гит все имеющиеся исходники решений задач с прошлого семестра.

Домашнее задание 2. 19.02.2013:

1)Разработать интерфейс, представляющий структуру данных "связный список". Реализовать этот список двумя разными способами (односвязный/двусвязный, на массиве/на указателях и т.п.) на основе полученного интерфейса.

2)Разработать интерфейс, представляющий структуру данных "стек". На его основе реализовать стек двумя разными способами. Реализовать стековый калькулятор для подсчета арифметических выражений.

Домашнее задание 3. 26.02.2013:

1)Создать интерфейс сортировщика, принимающего массив элементов и выполняющего над ним сортировку. На его основе создать несколько классов, реализующих произвольные (разные) алгоритмы сортировки.

2)Дан массив размерностью N x N, N - нечетное число. Вывести элементы массива при обходе его по спирали, начиная с центра. Для решения задачи разработать интерфейс Выводилка с методом вывести(), реализовать на его основе два класса, осуществляющих либо вывод на консоль либо в файл. Написать программу, которая по желанию пользователя выбирает реализацию Выводилки и выводит массив.

3)Реализовать программу, сортирующую столбцы матрицы по первым элементам.

Домашнее задание 4. 05.03.2013:

Создать графическое приложение с двумя виджетами — слайдером и прогрессбаром. Сделать так, чтобы при передвижении слайдера значение прогрессбара изменялось соответствующе.

1)Релизовать программу-калькулятор со следующим графическим интерфейсом (аргументы — QSpinBox, операция — QComboBox, значение — QLineEdit, при изменении значения аргумента или операции результат пересчитывается автоматически):

2)Реализовать продвинутый кнопочный калькулятор со следующим интерфейсом (для решения задачи использовать класс QSignalMapper).

Домашнее задание 5. 12.03.2013:

1)Реализовать класс для работы с хеш-таблицей (на списках). Общение с пользователем должно происходит в интерактивном режиме:
- добавить значение в хеш-таблицу
- удалить значение из хеш-таблицы
- поиск значения в хеш-таблице
- показать статистику по хеш-таблице (общее число ячеек, load factor, число конфликтов, максимальная длина списка в конфликтных ячейках и т.п.)
- выбрать хеш-функцию для подсчета хеша
Смена хэш-функции должна происходить во время работы программы, в класс используемая хеш-функция должна передаваться из клиентского кода.

2)Написать тесты ко всем предыдущим домашним задачам (кроме задач с GUI)

Домашнее задание 6. 19.03.2013:

1)Разработать и реализовать иерархию классов, описывающих дерево разбора арифметического выражения. Используя их, реализовать класс, вычисляющий значение выражения по дереву. Классы, представляющие операнды и операторы, должны сами уметь себя вычислять и печатать. Дерево разбора хранится в файле в виде (<операция> <операнд1> <операнд2>), где <операнд1> и <операнд2> сами могут быть деревьями, либо числами. Например, выражение (1 + 1) * 2 представляется в виде (* (+ 1 1) 2). Должны поддерживаться операции +, -, *, / и целые числа в качестве аргументов. Требуется построить дерево в явном виде, распечатать его (не обязательно так же, как во входном файле) и посчитать значение выражения обходом дерева. Можно считать, что входной файл корректен. Пример — по входному файлу (* (+ 1 1) 2) может печататься ( * ( + 1 1 ) 2 ) и выводиться 4.

2)Создать шаблонный класс, реализующий АТД "Множество", обладающий операциями добавления, удаления элемента, проверки на принадлежность множеству, пересечения и объединения множеств.

Домашнее задание 7. 26.03.2013:

1)Напишите программу, которая демонстрирует, что все деструкторы объектов, созданных в блоке, вызываются прежде, чем в этом блоке сгенерируется исключение.

2)На основе класса список из прошлой домашней работы реализовать класс UniqueList, который не содержит повторяющихся значений. Реализовать классы исключений, которые генерируются при попытке добавления в такой список уже существующего или при попытке удаления несуществующего элемента.

Домашнее задание 8. 09.04.2013:

1)Написать класс Bag, хранящий мультимножество (множество, в котором элементы могут повторяться). Класс должен быть ассимптотически эффективным по времени и по памяти (я бы советовал использовать деревья для внутреннего представления, в идеале самобалансирующиеся).

2)Реализовать шаблонный класс Vector с методами сложения, вычитания, скалярного умножения и проверки на нулевой вектор. Вектор n-мерный. В классе должен быть реализован конструктор копирования.

Домашнее задание 9. 30.04.2013:

1)Реализовать итератор для обхода класса Bag из предыдущей домашней работа. Равные элементы при обходе bag'а итератор должен выдавать последовательно. Итератор должен быть реализован в стиле Java — содержать следующие методы:
метод next(), возвращающий текущий элемент и переходящий к следующему;
метод hasNext(), который говорит, не является ли текущий элемент последним;
метод add(), который вставляет новый элемент в дерево (при необходимости перестраивая дерево);
метод remove(), который удаляет элемент в текущей позиции итератора (при необходимости перестраивая дерево) и перемещается на следующий элемент за удаляемым.

2)Заревьюить чужой код (выдается персонально).